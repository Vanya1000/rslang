import { RootState } from './store';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { WordType } from '../types/type';
import wordsAPI from '../api/words';

export type bookState = {
  words: WordType[];
  currentGroup: number;
  currentPage: number;
}

const initialState: bookState = {
  words: [],
  currentGroup: 0,
  currentPage: 0,
};

// below we write asynchronism
export const fetchWordsAsync = createAsyncThunk<WordType[] | undefined, void, {state: RootState}>(
  'book/fetchWords',
  async (_, {getState}) => {
    try {
      const { currentPage, currentGroup } = getState().book;
      const {status, data} = await wordsAPI.getWords(currentGroup, currentPage);
      if (status === 200) {
        return data;
      }
      // The value we return becomes the `fulfilled` action payload
    } catch (error) {
      console.log(error);
    }
  }
);


export const bookSlice = createSlice({
  name: 'book',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchWordsAsync.fulfilled, (state, action) => {
        state.words = action.payload!;
      })
  },
});

// below we export the actions
export const { } = bookSlice.actions;

export default bookSlice.reducer;
